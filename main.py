import telebot
from telebot import types
from config import *
from forex_python.bitcoin import BtcConverter
from coinbase.wallet.client import Client
from flask import Flask, request
import aiogram
import os
import logging
import psycopg2 as pg
import qrcode

client = Client(API_KEY, SECRET_API_KEY, api_version='2021-12-01')
primary_account = client.get_primary_account()

connection = pg.connect(DB_URI, sslmode='require')
cur = connection.cursor()

bot = telebot.TeleBot(TOKEN)
server = Flask(__name__)
logger = telebot.logger
logger.setLevel(logging.DEBUG)
b = BtcConverter()


# –ö–æ–º–∞–Ω–¥–∞ start
@bot.message_handler(commands=["start"])
def start(m, res=False):
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cur.execute('SELECT DISTINCT city FROM public.products;')
    rows = cur.fetchall()
    for row in rows:
        item = types.KeyboardButton(''.join(row[0]))
        markup.add(item)
    # cur.execute(f'INSERT INTO users(id, last_trans) VALUES ({m.chat.id}, false);')
    # connection.commit()
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑!", reply_markup=markup)


@bot.message_handler(content_types=["text"])
def handle_city(message: types.Message):
    markup_inline = types.InlineKeyboardMarkup()
    cur.execute(f'SELECT category FROM products WHERE city = "{message.text.strip()}" ')
    rows = cur.fetchall()
    for row in rows:
        item = types.KeyboardButton(row)
        markup_inline.add(item)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!", reply_markup=markup_inline)


# # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é–∑–µ—Ä–∞
# @bot.message_handler(content_types=["text"])
# def handle_category(message: types.Message):
#     markup_inline = types.InlineKeyboardMarkup()
#
#     if message.text.strip() == 'category 1':
#         rows = cur.execute("SELECT product, price FROM products WHERE category = 'category 1';").fetchall()
#         for row in rows:
#             img = open('data/' + ''.join(row[1]) + '.png', 'rb')
#             item_buy = types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å', callback_data=f'{row[0]}')
#             markup_inline.keyboard.clear()
#             markup_inline.add(item_buy)
#             bot.send_photo(message.chat.id, img,
#                            f'–¶–µ–Ω–∞: {row[2]} RUB ‚âà {round(b.convert_to_btc((row[2]), "RUB"), 7)} ‚Çø',
#                            reply_markup=markup_inline)
#     elif message.text.strip() == '–ü–∏—Ç–µ—Ä':
#         rows = cur.execute("SELECT id, product, cost FROM public.products WHERE city = 'Piter';").fetchall()
#         for row in rows:
#             img = open('data/' + ''.join(row[1]) + '.png', 'rb')
#             item_buy = types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å', callback_data=f'{row[0]}')
#             markup_inline.keyboard.clear()
#             markup_inline.add(item_buy)
#             bot.send_photo(message.chat.id, img,
#                            f'–¶–µ–Ω–∞: {row[2]} RUB ‚âà {round(b.convert_to_btc((row[2]), "RUB"), 7)} ‚Çø',
#                            reply_markup=markup_inline)
#     else:
#         bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –µ—â–µ –Ω–µ—Ç –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ üòî")
#
#
# @bot.callback_query_handler(lambda c: c.data)
# def callback_inline(callback_query: types.CallbackQuery):
#     if callback_query.data == '1':
#         addr = primary_account.create_address()['address']
#         row = cur.execute("SELECT cost FROM public.products WHERE id = 1;").fetchall()
#         msg = "<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–∞—à–∏–Ω–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –ú–æ—Å–∫–≤–µ</b> \n\n" \
#               "–í–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É –Ω–∏–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é" \
#               " —Å—É–º–º—É ‚âà" + f'<b>{round(b.convert_to_btc(row[0][0], "RUB"), 7)} ‚Çø</b>' + \
#               " \n\n <i>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Bitcoin –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</i>: \n" + f'<code>{addr}</code>'
#         bot.send_message(callback_query.from_user.id, msg, parse_mode="HTML")
#         img = qrcode.make(addr)
#         img.save('qr.png')
#         bot.send_photo(callback_query.from_user.id, open('qr.png', 'rb'))
#     if callback_query.data == '2':
#         addr = primary_account.create_address()['address']
#         row = cur.execute("SELECT cost FROM public.products WHERE id = 2;")
#         msg = "<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ö–æ—Ä–∞–±–ª–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –ú–æ—Å–∫–≤–µ</b> \n\n" \
#               "–í–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É –Ω–∏–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é" \
#               " —Å—É–º–º—É ‚âà" + f'<b>{round(b.convert_to_btc(row[0][0], "RUB"), 7)} ‚Çø</b>' + \
#               " \n\n <i>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Bitcoin –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</i>: \n" + f'<code>{addr}</code>'
#         bot.send_message(callback_query.from_user.id, msg, parse_mode="HTML")
#         img = qrcode.make(addr)
#         img.save('qr.png')
#         bot.send_photo(callback_query.from_user.id, open('qr.png', 'rb'))
#     if callback_query.data == '3':
#         addr = primary_account.create_address()['address']
#         row = cur.execute("SELECT cost FROM public.products WHERE id = 3;").fetchall()
#         msg = "<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –í–µ—Ä—Ç–æ–ª–µ—Ç–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –ú–æ—Å–∫–≤–µ</b> \n\n" \
#               "–í–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É –Ω–∏–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é" \
#               " —Å—É–º–º—É ‚âà" + f'<b>{round(b.convert_to_btc(row[0][0], "RUB"), 7)} ‚Çø</b>' + \
#               " \n\n <i>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Bitcoin –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</i>: \n" + f'<code>{addr}</code>'
#         bot.send_message(callback_query.from_user.id, msg, parse_mode="HTML")
#         img = qrcode.make(addr)
#         img.save('qr.png')
#         bot.send_photo(callback_query.from_user.id, open('qr.png', 'rb'))
#     if callback_query.data == '4':
#         addr = primary_account.create_address()['address']
#         row = cur.execute("SELECT cost FROM public.products WHERE id = 4;").fetchall()
#         msg = "<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–∞—à–∏–Ω–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –ü–∏—Ç–µ—Ä–µ</b> \n\n" \
#               "–í–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É –Ω–∏–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é" \
#               " —Å—É–º–º—É ‚âà" + f'<b>{round(b.convert_to_btc(row[0][0], "RUB"), 7)} ‚Çø</b>' + \
#               " \n\n <i>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Bitcoin –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</i>: \n" + f'<code>{addr}</code>'
#         bot.send_message(callback_query.from_user.id, msg, parse_mode="HTML")
#         img = qrcode.make(addr)
#         img.save('qr.png')
#         bot.send_photo(callback_query.from_user.id, open('qr.png', 'rb'))
#     if callback_query.data == '5':
#         addr = primary_account.create_address()['address']
#         row = cur.execute("SELECT cost FROM public.products WHERE id = 5;").fetchall()
#         msg = "<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ö–æ—Ä–∞–±–ª–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –ü–∏—Ç–µ—Ä–µ</b> \n\n" \
#               "–í–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É –Ω–∏–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é" \
#               " —Å—É–º–º—É ‚âà" + f'<b>{round(b.convert_to_btc(row[0][0], "RUB"), 7)} ‚Çø</b>' + \
#               " \n\n <i>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Bitcoin –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</i>: \n" + f'<code>{addr}</code>'
#         bot.send_message(callback_query.from_user.id, msg, parse_mode="HTML")
#         img = qrcode.make(addr)
#         img.save('qr.png')
#         bot.send_photo(callback_query.from_user.id, open('qr.png', 'rb'))
#     if callback_query.data == '6':
#         addr = primary_account.create_address()['address']
#         row = cur.execute("SELECT cost FROM public.products WHERE id = 6;").fetchall()
#         msg = "<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –í–µ—Ä—Ç–æ–ª–µ—Ç–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –ü–∏—Ç–µ—Ä–µ</b> \n\n" \
#               "–í–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É –Ω–∏–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é" \
#               " —Å—É–º–º—É ‚âà" + f'<b>{round(b.convert_to_btc(row[0][0], "RUB"), 7)} ‚Çø</b>' + \
#               " \n\n <i>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Bitcoin –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</i>: \n" + f'<code>{addr}</code>'
#         bot.send_message(callback_query.from_user.id, msg, parse_mode="HTML")
#         img = qrcode.make(addr)
#         img.save('qr.png')
#         bot.send_photo(callback_query.from_user.id, open('qr.png', 'rb'))


@server.route(f'/{TOKEN}', methods=['POST'])
def redirect_message():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return '!', 200


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url=APP_URL)
    server.run(host='0.0.0.0', port=int(os.environ.get("PORT", 5000)))
