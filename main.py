from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from config import TOKEN, API_KEY, version, SECRET_PIN, db_exec
from forex_python.bitcoin import BtcConverter
from block_io import BlockIo
import qrcode

block_io = BlockIo(API_KEY, SECRET_PIN, version)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
b = BtcConverter()


# –ö–æ–º–∞–Ω–¥–∞ start
@dp.message_handler(commands=["start"])
async def start(m, res=False):
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ú–æ—Å–∫–≤–∞")
    item2 = types.KeyboardButton("–ü–∏—Ç–µ—Ä")
    markup.add(item1)
    markup.add(item2)
    await bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥!", reply_markup=markup)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é–∑–µ—Ä–∞
@dp.message_handler(content_types=["text"])
async def handle_text(message: types.Message):
    markup_inline = types.InlineKeyboardMarkup()

    if message.text.strip() == '–ú–æ—Å–∫–≤–∞':
        rows = await db_exec("SELECT id, product, cost FROM public.products WHERE city = 'Moscow';")

        for row in rows:
            img = open('data/' + ''.join(row[1]) + '.png', 'rb')
            item_buy = types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å', callback_data=f'{row[0]}')
            markup_inline.inline_keyboard.clear()
            markup_inline.add(item_buy)
            await bot.send_photo(message.chat.id, img, f'–¶–µ–Ω–∞: {row[2]} RUB ‚âà {round(b.convert_to_btc((row[2]), "RUB"), 7)} ‚Çø',\
                                 reply_markup=markup_inline)
    elif message.text.strip() == '–ü–∏—Ç–µ—Ä':
        rows = await db_exec("SELECT id, product, cost FROM public.products WHERE city = 'Piter';")
        for row in rows:
            img = open('data/' + ''.join(row[1]) + '.png', 'rb')
            item_buy = types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å', callback_data=f'{row[0]}')
            markup_inline.inline_keyboard.clear()
            markup_inline.add(item_buy)
            await bot.send_photo(message.chat.id, img, f'–¶–µ–Ω–∞: {row[2]} RUB ‚âà {round(b.convert_to_btc((row[2]), "RUB"), 7)} ‚Çø',\
                                 reply_markup=markup_inline)
    else:
        await bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –µ—â–µ –Ω–µ—Ç –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ üòî")


@dp.callback_query_handler(lambda c: c.data)
async def callback_inline(callback_query: types.CallbackQuery):
    if callback_query.data == '1':
        addr = block_io.get_new_address()['data']['address']
        row = await db_exec("SELECT cost FROM public.products WHERE id = 1;")
        msg = "<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–∞—à–∏–Ω–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –ú–æ—Å–∫–≤–µ</b> \n\n" \
              "–í–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É –Ω–∏–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é" \
              " —Å—É–º–º—É ‚âà" + f'<b>{round(b.convert_to_btc(row[0][0], "RUB"), 7)} ‚Çø</b>' +\
              " \n\n <i>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Bitcoin –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</i>: \n" + f'<code>{addr}</code>'
        await bot.send_message(callback_query.from_user.id, msg, parse_mode="HTML")
        img = qrcode.make(addr)
        img.save('qr.png')
        await bot.send_photo(callback_query.from_user.id, open('qr.png', 'rb'))
    if callback_query.data == '2':
        addr = block_io.get_new_address()['data']['address']
        row = await db_exec("SELECT cost FROM public.products WHERE id = 2;")
        msg = "<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ö–æ—Ä–∞–±–ª–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –ú–æ—Å–∫–≤–µ</b> \n\n" \
              "–í–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É –Ω–∏–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é" \
              " —Å—É–º–º—É ‚âà" + f'<b>{round(b.convert_to_btc(row[0][0], "RUB"), 7)} ‚Çø</b>' +\
              " \n\n <i>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Bitcoin –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</i>: \n" + f'<code>{addr}</code>'
        await bot.send_message(callback_query.from_user.id, msg, parse_mode="HTML")
        img = qrcode.make(addr)
        img.save('qr.png')
        await bot.send_photo(callback_query.from_user.id, open('qr.png', 'rb'))
    if callback_query.data == '3':
        addr = block_io.get_new_address()['data']['address']
        row = await db_exec("SELECT cost FROM public.products WHERE id = 3;")
        msg = "<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –í–µ—Ä—Ç–æ–ª–µ—Ç–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –ú–æ—Å–∫–≤–µ</b> \n\n" \
              "–í–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É –Ω–∏–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é" \
              " —Å—É–º–º—É ‚âà" + f'<b>{round(b.convert_to_btc(row[0][0], "RUB"), 7)} ‚Çø</b>' +\
              " \n\n <i>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Bitcoin –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</i>: \n" + f'<code>{addr}</code>'
        await bot.send_message(callback_query.from_user.id, msg, parse_mode="HTML")
        img = qrcode.make(addr)
        img.save('qr.png')
        await bot.send_photo(callback_query.from_user.id, open('qr.png', 'rb'))
    if callback_query.data == '4':
        addr = block_io.get_new_address()['data']['address']
        row = await db_exec("SELECT cost FROM public.products WHERE id = 4;")
        msg = "<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–∞—à–∏–Ω–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –ü–∏—Ç–µ—Ä–µ</b> \n\n" \
              "–í–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É –Ω–∏–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é" \
              " —Å—É–º–º—É ‚âà" + f'<b>{round(b.convert_to_btc(row[0][0], "RUB"), 7)} ‚Çø</b>' +\
              " \n\n <i>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Bitcoin –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</i>: \n" + f'<code>{addr}</code>'
        await bot.send_message(callback_query.from_user.id, msg, parse_mode="HTML")
        img = qrcode.make(addr)
        img.save('qr.png')
        await bot.send_photo(callback_query.from_user.id, open('qr.png', 'rb'))
    if callback_query.data == '5':
        addr = block_io.get_new_address()['data']['address']
        row = await db_exec("SELECT cost FROM public.products WHERE id = 5;")
        msg = "<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ö–æ—Ä–∞–±–ª–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –ü–∏—Ç–µ—Ä–µ</b> \n\n" \
              "–í–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É –Ω–∏–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é" \
              " —Å—É–º–º—É ‚âà" + f'<b>{round(b.convert_to_btc(row[0][0], "RUB"), 7)} ‚Çø</b>' +\
              " \n\n <i>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Bitcoin –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</i>: \n" + f'<code>{addr}</code>'
        await bot.send_message(callback_query.from_user.id, msg, parse_mode="HTML")
        img = qrcode.make(addr)
        img.save('qr.png')
        await bot.send_photo(callback_query.from_user.id, open('qr.png', 'rb'))
    if callback_query.data == '6':
        addr = block_io.get_new_address()['data']['address']
        row = await db_exec("SELECT cost FROM public.products WHERE id = 6;")
        msg = "<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –í–µ—Ä—Ç–æ–ª–µ—Ç–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –ü–∏—Ç–µ—Ä–µ</b> \n\n" \
              "–í–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É –Ω–∏–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é" \
              " —Å—É–º–º—É ‚âà" + f'<b>{round(b.convert_to_btc(row[0][0], "RUB"), 7)} ‚Çø</b>' +\
              " \n\n <i>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Bitcoin –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</i>: \n" + f'<code>{addr}</code>'
        await bot.send_message(callback_query.from_user.id, msg, parse_mode="HTML")
        img = qrcode.make(addr)
        img.save('qr.png')
        await bot.send_photo(callback_query.from_user.id, open('qr.png', 'rb'))


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp)
